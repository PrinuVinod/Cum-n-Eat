<!-- views/revieworder.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review Order | Tasty</title>
    <style>
        body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #080808;
        color: #fff;
        }

        header {
        background-color: #000;
        color: #fff;
        padding: 10px 20px;
        text-align: center;
        }

        nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        }

        .restaurant-name {
        font-size: 1.5em;
        font-weight: bold;
        }

        .options-dropdown {
        display: flex;
        align-items: center;
        }

        .options-dropdown a {
        color: #fff;
        text-decoration: none;
        padding: 10px;
        margin: 0 10px;
        display: none;
        }

        .hamburger-menu {
        font-size: 1.5em;
        cursor: pointer;
        }

        .main-container {
        max-width: 800px;
        margin: 20px auto;
        background-color: black;
        padding: 10px;
        }

        table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        color: #fff; /* White text for table */
        }

        th, td {
        border: 1px solid orange; /* Orange borders */
        padding: 8px;
        text-align: left;
        }

        th {
        background-color: orange; /* Orange background for header */
        color: #fff; /* White text for header */
        }

        tbody tr:nth-child(even) {
        background-color: black; /* Dark background for even rows */
        }

        input[type="number"] {
        width: 50px;
        color: #000; /* Black text for number input */
        }

        button {
        background-color: orange;
        color: #fff;
        border: none;
        padding: 8px 16px;
        cursor: pointer;
        }

        button:hover {
        background-color: white;
        color: black;
        }

        form {
        text-align: center;
        margin-top: 20px;
        }
        
        select {
        background-color: black;
        color: #fff;
        }

        @media only screen and (max-width: 600px) {
        .options-dropdown a {
            display: block; /* Display options for small screens */
        }

        .options-dropdown.active {
            display: flex; /* Display options when active class is applied */
        }

        .options-dropdown {
            display: none; /* Hide options for small screens by default */
            width: 100%;
        }

        .restaurant-name {
            margin-bottom: 10px; /* Add some space between restaurant name and options for small screens */
        }
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <div class="restaurant-name">Tasty</div>
            <div style="display: flex;">
            <button style="margin-right: 10px; border-radius: 20px;" onclick="callWaiter()">Call Waiter</button>
            <button style="border-radius: 20px;" onclick="backtoMenu()">Menu</button>
            </div>
        </nav>
    </header>
    <main>
        <h1>Review Order</h1>
        <table>
            <thead>
                <tr>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% orderList.forEach(order => { %>
                    <tr>
                        <td><%= order.itemName %></td>
                        <td><%= order.quantity %></td>
                        <td>
                            <button style="border-radius: 20px;" onclick="deleteOrder('<%= order._id %>')">Delete</button>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>

        <div style="text-align: center; margin-top: 20px;">
            <button style="border-radius: 20px;" onclick="submitOrder()">Submit Order</button>
        </div>
    </main>
    <script>
        function submitOrder() {
        // Fetch order data from the server as HTML
        fetch('/toorder/submit-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded', // Set content type to form data
            },
            body: 'submit=true', // You can include additional data here if needed
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
            }
            return response.text(); // Use text() instead of json()
        })
        .then(responseHTML => {
            // Process the responseHTML (if any)
            console.log(responseHTML);
            
            // Assuming you want to display the HTML content in the current page
            document.body.innerHTML = responseHTML;
        })
        .catch(error => {
            console.error('Error submitting order:', error);
        });
    }

        function duplicateToKitchenView(orderList) {
            // Prepare the data for the fetch request
            const data = { orders: orderList };

            // Make a POST request to duplicate data
            fetch('/menu/duplicate-to-kitchenview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
            })
            .then(response => response.json())
            .then(result => {
                console.log('Order data duplicated to kitchenview collection:', result);
            })
            .catch(error => {
                console.error('Error duplicating order data:', error);
            });
        }

        function clearOrdersCollection() {
            // Make a DELETE request to clear data from orders collection
            fetch('/menu/clear-orders', {
            method: 'DELETE',
            })
            .then(response => response.json())
            .then(result => {
                console.log('Order data cleared from orders collection:', result);

                // Fetch and display updated order data
                fetchOrderData();
            })
            .catch(error => {
                console.error('Error clearing order data:', error);
            });
        }

        function callWaiter() {
            console.log('Calling waiter...');
        }

        function deleteOrder(orderId) {
            fetch(`/menu/delete-order/${orderId}`, {
                method: 'DELETE',
            })
                .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
                }
                console.log('Item Deleted From Order.');
                // After deletion, reload the page to fetch and display updated order data
                location.reload();
                })
                .catch(error => {
                console.error('Error Deleting Order.', error);
                });
            }
        
        function backtoMenu() {
          window.location.href = '/menu';
        }
    </script>
</body>
</html>
