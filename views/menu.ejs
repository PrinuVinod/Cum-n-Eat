<!-- views/menu.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Menu | PVN's Paradise</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
    }

    header {
      background-color: #333;
      color: #fff;
      padding: 10px 20px;
      text-align: center;
    }

    nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .restaurant-name {
      font-size: 1.5em;
      font-weight: bold;
    }

    .options-dropdown {
      display: flex;
    }

    .options-dropdown a {
      color: #fff;
      text-decoration: none;
      padding: 10px;
      margin: 0 10px;
    }

    .main-container {
      max-width: 800px;
      margin: 20px auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }

    th {
      background-color: #333;
      color: #fff;
    }

    tbody tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    input[type="number"] {
      width: 50px;
    }

    button {
      background-color: #4caf50;
      color: #fff;
      border: none;
      padding: 8px 16px;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }

    form {
      text-align: center;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <script>
    // Define a default empty menu array
    var menu = [];

    // Check if the server has provided the menu data
    if (typeof serverMenu !== 'undefined') {
      menu = serverMenu;
    }
  </script>
  <header>
    <nav>
      <div class="restaurant-name">PVN's Paradise</div>
      <div class="options-dropdown">
        <label for="category-dropdown">Select Category: </label>
        <select id="category-dropdown" onchange="filterMenu(this.value)">
          <option value="all">All</option>
          <option value="soups">Soups</option>
          <option value="starters">Starters</option>
          <option value="breads">Breads</option>
          <option value="maincourse">Main Course</option>
          <option value="snacks">Snacks</option>
          <option value="desserts">Desserts</option>
          <option value="drinks">Drinks</option>
          <!-- Add other categories as needed -->
        </select>
      </div>
      <label for="search-input">Search by Item Name:</label>
      <input type="text" id="search-input" oninput="searchMenu()" placeholder="Search Item">
      <button onclick="callWaiter()">Call Waiter</button>
      <button onclick="reviewOrder()">Review Order</button>
    </nav>
  </header>

  <main>
    <table>
      <thead>
        <tr>
          <th>Item Name</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Add to Order</th>
        </tr>
      </thead>
      <tbody>
        <% menu.forEach(item => { %>
          <tr data-category="<%= item.category %>">
            <td><%= item.name %></td>
            <td>INR <%= item.price.toFixed(2) %></td>
            <td><input type="number" min="1" value="1" data-item="<%= item.name %>"></td>
            <td><button onclick="addToOrder('<%= item.name %>')">Add</button></td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </main>

  <script>
    // Function to add an item to the order
    function addToOrder(itemName) {
      // Find the selected menu item
      const item = menu.find(item => item.name === itemName);

      // Validate quantity
      const quantityInput = document.querySelector(`input[data-item="${itemName}"]`);
      const quantity = parseInt(quantityInput.value, 10);
      if (isNaN(quantity) || quantity < 1) {
        console.error('Invalid quantity');
        return;
      }

      // Log the data before making the request
      console.log('Data to be sent:', { itemName, quantity});

      // Create a FormData object and append data
      const formData = new FormData();
      formData.append('itemName', itemName);
      formData.append('quantity', quantity);

      // Make a POST request to add the item to the order
      fetch('/menu/add-to-order', {
        method: 'POST',
        body: formData,
      })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            console.error('Error adding item to order:', data.error);
          } else {
            console.log('Item added to order:', data);
            // Optionally, you can update the UI or show a success message
          }
        })
        .catch(error => {
          console.error('Error adding item to order:', error);
        });
    }

    // Function to filter the menu
    function filterMenu(category) {
      const tableRows = document.querySelectorAll('tbody tr');
      
      tableRows.forEach(row => {
        const itemCategory = row.getAttribute('data-category');
        if (category === 'all' || itemCategory === category) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    // Function to search an item
    function searchMenu() {
      const searchInput = document.getElementById('search-input');
      const searchTerm = searchInput.value.toLowerCase();

      const tableRows = document.querySelectorAll('tbody tr');

      tableRows.forEach(row => {
        const itemName = row.querySelector('td:first-child').textContent.toLowerCase();
        if (itemName.includes(searchTerm)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    // Function to call the waiter
    function callWaiter() {
        // Add your logic to call the waiter here
        console.log('Calling waiter...');
      }

    // Function to review the order
    function reviewOrder() {
      window.location.href = '/menu/get-orders';
    }
  </script>
</body>
</html>